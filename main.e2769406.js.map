{"version":3,"sources":["scripts/main.js"],"names":["table","document","querySelector","tableHead","tHead","tableBody","tBodies","sortTable","list","indexOfCellToSort","sort","previous","current","previousContent","cells","textContent","currentContent","parseInt","slice","split","join","localeCompare","append","addEventListener","event","target","tagName","cellIndex","rows"],"mappings":";AAAA,aA8CC,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EA5CD,IAAMA,EAAQC,SAASC,cAAc,SAC/BC,EAAYH,EAAMI,MAClBC,EAAYL,EAAMM,QAAQ,GAehC,SAASC,EAAUC,EAAMC,GACvBD,EAAKE,KAAK,SAACC,EAAUC,GACfC,IAAAA,EAAkBF,EAASG,MAAML,GAAmBM,YACpDC,EAAiBJ,EAAQE,MAAML,GAAmBM,YAE9CN,OAAAA,GACD,KAAA,EAIII,OAHPA,EAAkBI,SAASJ,KAC3BG,EAAiBC,SAASD,IAGvB,KAAA,EASIH,OARPA,EAAkBI,SAChBJ,EAAgBK,MAAM,GAAGC,MAAM,KAAKC,KAAK,OAG3CJ,EAAiBC,SACfD,EAAeE,MAAM,GAAGC,MAAM,KAAKC,KAAK,MAMvCP,OAAAA,EAAgBQ,cAAcL,KAGvCX,EAAUiB,OAAVjB,MAAAA,EAAoBG,EAAAA,IAvCtBL,EAAUoB,iBAAiB,QAAS,SAAAC,GAC5BC,IAAAA,EAASD,EAAMC,OAEjBA,GAAmB,OAAnBA,EAAOC,QAAPD,CAIEhB,IAAAA,EAAoBgB,EAAOE,UAGjCpB,EAFuBF,EAAAA,EAAUuB,MAEZnB","file":"main.e2769406.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst table = document.querySelector('table');\nconst tableHead = table.tHead;\nconst tableBody = table.tBodies[0];\n\ntableHead.addEventListener('click', event => {\n  const target = event.target;\n\n  if (target.tagName !== 'TH') {\n    return;\n  }\n\n  const indexOfCellToSort = target.cellIndex;\n  const tableRows = [ ...tableBody.rows ];\n\n  sortTable(tableRows, indexOfCellToSort);\n});\n\nfunction sortTable(list, indexOfCellToSort) {\n  list.sort((previous, current) => {\n    let previousContent = previous.cells[indexOfCellToSort].textContent;\n    let currentContent = current.cells[indexOfCellToSort].textContent;\n\n    switch (indexOfCellToSort) {\n      case 2:\n        previousContent = parseInt(previousContent);\n        currentContent = parseInt(currentContent);\n\n        return previousContent - currentContent;\n      case 3:\n        previousContent = parseInt(\n          previousContent.slice(1).split(',').join('')\n        );\n\n        currentContent = parseInt(\n          currentContent.slice(1).split(',').join('')\n        );\n\n        return previousContent - currentContent;\n    }\n\n    return previousContent.localeCompare(currentContent);\n  });\n\n  tableBody.append(...list);\n}\n"]}